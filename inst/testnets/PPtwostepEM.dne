// ~->[DNET-1]->~

// File created by AlmondR at FloridaStateU using Netica 5.24 on Apr 09, 2020 at 20:41:41 UTC.

bnet PPtwostepEM {
autoupdate = FALSE;
title = "Two-step Evidence Model";
comment = "An evidence model with an observable which has different mechanisms for each level.";
whenchanged = 1523316637;

visual V4 {
	defdispform = BELIEFBARS;
	nodelabeling = TITLE;
	NodeMaxNumEntries = 50;
	nodefont = font {shape= "Arial"; size= 9;};
	linkfont = font {shape= "Arial"; size= 9;};
	windowposn = (104, 104, 1080, 431);
	resolution = 72;
	drawingbounds = (1080, 720);
	showpagebreaks = FALSE;
	usegrid = TRUE;
	gridspace = (6, 6);
	NodeSet Node {BuiltIn = 1; Color = 0x00e1e1e1;};
	NodeSet Nature {BuiltIn = 1; Color = 0x00f8eed2;};
	NodeSet Deterministic {BuiltIn = 1; Color = 0x00d3caa6;};
	NodeSet Finding {BuiltIn = 1; Color = 0x00c8c8c8;};
	NodeSet Constant {BuiltIn = 1; Color = 0x00ffffff;};
	NodeSet ConstantValue {BuiltIn = 1; Color = 0x00ffffb4;};
	NodeSet Utility {BuiltIn = 1; Color = 0x00ffbdbd;};
	NodeSet Decision {BuiltIn = 1; Color = 0x00dee8ff;};
	NodeSet Documentation {BuiltIn = 1; Color = 0x00f0fafa;};
	NodeSet Title {BuiltIn = 1; Color = 0x00ffffff;};
	PrinterSetting A {
		margins = (1270, 1270, 1270, 1270);
		};
	};
user U1 {
	Hub = "miniPP_CM";
	Pathname = "PPtwostepEM.dne";
	priorWeight = "10";
	};

param X_EnergyTransfer_1 {
	kind = DISCONNECTED;
	discrete = TRUE;
	states = (High, Medium, Low);
	StateComments = ("Can use to solve difficult problems", "Can use to solve simple but not difficult problems", "Can not solve simple problems.");
	levels = (0.967421566101701, 0, -0.967421566101701);
	title = "EnergyTransfer";
	whenchanged = 1523314216;
	};

param X_IterativeD_1 {
	kind = DISCONNECTED;
	discrete = TRUE;
	states = (High, Medium, Low);
	StateComments = ("Complete Mastery", "Partial Mastery", "No Mastery");
	levels = (0.967421566101701, 0, -0.967421566101701);
	title = "IterativeD";
	whenchanged = 1523314216;
	};

node TwoStepObs {
	kind = NATURE;
	discrete = TRUE;
	chance = CHANCE;
	states = (Full, Partial, None);
	statetitles = ("Complete Solution", "First step but not second", "No attempt of failed first step");
	inputs = (IterativeD, EnergyTransfer);
	parents = (X_IterativeD_1, X_EnergyTransfer_1);
	probs = 
		// Complete Solutio First step but n No attempt of fa  // IterativeD EnergyTransfer 
		  (0.5183404,   0.2341625,   0.2474971,    // High       High           
		   0.06193196,  0.1448989,   0.7931691,    // High       Medium         
		   0.002804,    0.03397635,  0.9632196,    // High       Low            
		   0.5032153,   0.2273297,   0.269455,     // Medium     High           
		   0.06193196,  0.1448989,   0.7931691,    // Medium     Medium         
		   0.002804,    0.03397635,  0.9632196,    // Medium     Low            
		   0.2366892,   0.1069254,   0.6563854,    // Low        High           
		   0.05649051,  0.1321678,   0.8113416,    // Low        Medium         
		   0.002804,    0.03397635,  0.9632196);   // Low        Low            ;
	numcases = 10;
	title = "Partial Credit observable";
	comment = "A partial credit response where each step requires different inputs.";
	whenchanged = 1523316637;
	user U1 {
		link = "\"partialCredit\"";
		rules = "list(\"Compensatory\", \"OffsetConjunctive\")";
		Q = "structure(c(FALSE, TRUE, TRUE, TRUE), .Dim = c(2L, 2L), .Dimnames = list(     c(\"3\", \"4\"), \
			c(\"IterativeD\", \"EnergyTransfer\")))";
		lnAlphas = "list(structure(0, .Names = \"EnergyTransfer\"), 0)";
		betas = "list(0.5, structure(c(0.1, 1), .Names = c(\"IterativeD\", \"EnergyTransfer\" )))";
		};
	visual V4 {
		center = (210, 60);
		height = 1;
		link 1 {
			labelposn = (245, 2, 296, 17);
			path = ((243, 2), (228, 27));
			};
		link 2 {
			labelposn = (186, 0, 270, 15);
			path = ((176, 0), (192, 27));
			};
		};
	};
NodeSet onodes {Nodes = (TwoStepObs);};
NodeSet Observables {Nodes = (TwoStepObs);};
NodeSet pnodes {Nodes = (TwoStepObs);};
};
