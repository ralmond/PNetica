// ~->[DNET-1]->~

// File created by AlmondR at FloridaStateU using Netica 5.05 on Jun 10, 2017 at 15:01:33.

bnet miniPP_CM {
autoupdate = TRUE;
whenchanged = 1496356249;

visual V1 {
	defdispform = BELIEFBARS;
	nodelabeling = TITLE;
	NodeMaxNumEntries = 50;
	nodefont = font {shape= "Arial"; size= 9;};
	linkfont = font {shape= "Arial"; size= 9;};
	windowposn = (4, 3, 949, 548);
	resolution = 72;
	drawingbounds = (1515, 782);
	showpagebreaks = FALSE;
	usegrid = TRUE;
	gridspace = (6, 6);
	NodeSet Node {BuiltIn = 1; Color = 0x00E1E1E1;};
	NodeSet Nature {BuiltIn = 1; Color = 0x00F8EED2;};
	NodeSet Deterministic {BuiltIn = 1; Color = 0x00D3CAA6;};
	NodeSet Finding {BuiltIn = 1; Color = 0x00C8C8C8;};
	NodeSet Constant {BuiltIn = 1; Color = 0x00FFFFFF;};
	NodeSet ConstantValue {BuiltIn = 1; Color = 0x00FFFFB4;};
	NodeSet Utility {BuiltIn = 1; Color = 0x00FFBDBD;};
	NodeSet Decision {BuiltIn = 1; Color = 0x00DEE8FF;};
	NodeSet Documentation {BuiltIn = 1; Color = 0x00F0FAFA;};
	NodeSet Title {BuiltIn = 1; Color = 0x00FFFFFF;};
	NodeSet HighLevel {Color = 0x00FF8080;};
	NodeSet Proficiency {Disabled = 1; Color = 0x00C8C8C8;};
	NodeSet LowLevel {Color = 0x00FF8000;};
	NodeSet pnode {Disabled = 1; Color = 0x00C8C8C8;};
	NodeSet pnodes {Disabled = 1; Color = 0x00C8C8C8;};
	NodeSet Proficiencies {Disabled = 1; Color = 0x00C8C8C8;};
	NodeSet onodes {Disabled = 1; Color = 0x00C8C8C8;};
	NodeSet Observables {Disabled = 1; Color = 0x00C8C8C8;};
	PrinterSetting A {
		margins = (1270, 1270, 1270, 1270);
		};
	};
user U1 {
	priorWeight = "10";
	};

node Physics {
	kind = NATURE;
	discrete = TRUE;
	chance = CHANCE;
	states = (High, Medium, Low);
	levels = (0.967421566101701, 0, -0.967421566101701);
	parents = ();
	probs = 
		// High         Medium       Low          
		  (0.3333333,   0.3333333,   0.3333333);
	numcases = 10;
	EqnDirty = TRUE;
	title = "Physics Understanding";
	whenchanged = 1496354812;
	user U1 {
		Q = "TRUE";
		rules = "\"Compensatory\"";
		link = "\"normalLink\"";
		linkScale = "1";
		lnAlphas = "1";
		betas = "0";
		};
	visual V1 {
		center = (186, 198);
		dispform = LABELBOX;
		height = 4;
		};
	};

node IterativeD {
	kind = NATURE;
	discrete = TRUE;
	chance = CHANCE;
	states = (High, Medium, Low);
	levels = (0.967421566101701, 0, -0.967421566101701);
	parents = (Physics);
	probs = 
		// High         Medium       Low           // Physics 
		  (0.7226776,   0.2334387,   0.04388373,   // High    
		   0.3830976,   0.403308,    0.2135944,    // Medium  
		   0.1172148,   0.3759116,   0.5068735);   // Low     ;
	EqnDirty = TRUE;
	title = "Use iterative design to solve a problem";
	comment = "Mass and GPE are directly related\nHeight and GPE are directly related";
	whenchanged = 1496355135;
	user U1 {
		Q = "TRUE";
		rules = "\"Compensatory\"";
		link = "\"normalLink\"";
		linkScale = "0.447213595499958";
		lnAlphas = "structure(-0.111571775657105, .Names = \"Physics\")";
		betas = "-0.2";
		};
	visual V1 {
		center = (468, 54);
		dispform = LABELBOX;
		height = 5;
		};
	};

node EnergyTransfer {
	kind = NATURE;
	discrete = TRUE;
	chance = CHANCE;
	states = (High, Medium, Low);
	levels = (0.967421566101701, 0, -0.967421566101701);
	parents = (Physics);
	probs = 
		// High         Medium       Low           // Physics 
		  (0.8045176,   0.1859553,   0.009527109,  // High    
		   0.457503,    0.3920066,   0.1504904,    // Medium  
		   0.05229448,  0.2793112,   0.6683943);   // Low     ;
	EqnDirty = TRUE;
	title = "Energy can Transfer";
	whenchanged = 1496355103;
	user U1 {
		Q = "TRUE";
		rules = "\"Compensatory\"";
		link = "\"normalLink\"";
		linkScale = "0.447213595499958";
		lnAlphas = "structure(-0.111571775657105, .Names = \"Physics\")";
		betas = "0";
		};
	visual V1 {
		center = (450, 282);
		dispform = LABELBOX;
		height = 3;
		};
	};

node NTL {
	kind = NATURE;
	discrete = TRUE;
	chance = CHANCE;
	states = (High, Medium, Low);
	levels = (0.967421566101701, 0, -0.967421566101701);
	parents = (Physics, EnergyTransfer);
	probs = 
		// High         Medium       Low           // Physics EnergyTransfer 
		  (0.8636695,   0.1350801,   0.001250477,  // High    High           
		   0.4274682,   0.531904,    0.04062774,   // High    Medium         
		   0.07178815,  0.6067694,   0.3214425,    // High    Low            
		   0.3616029,   0.5804327,   0.05796443,   // Medium  High           
		   0.05113405,  0.5638431,   0.3850228,    // Medium  Medium         
		   0.001785668, 0.1599221,   0.8382922,    // Medium  Low            
		   0.03551311,  0.512626,    0.4518609,    // Low     High           
		   0.001017459, 0.1222479,   0.8767347,    // Low     Medium         
		   6.360015e-6, 0.007365868, 0.9926278);   // Low     Low            ;
	numcases = 10;
	EqnDirty = TRUE;
	title = "Newton's Third Law?";
	comment = "Force pairs act in opposite directions\nForce pairs have equal magnitudes";
	whenchanged = 1496354959;
	user U1 {
		Q = "TRUE";
		rules = "\"Compensatory\"";
		link = "\"normalLink\"";
		linkScale = "0.447213595499958";
		lnAlphas = "structure(c(-0.0526802578289132, -0.178337471969366), .Names = c(\"Physics\",  \
			\"EngergyTransfer\"))";
		betas = "0.3";
		};
	visual V1 {
		center = (462, 132);
		dispform = LABELBOX;
		height = 1;
		};
	};

node POfMom {
	kind = NATURE;
	discrete = TRUE;
	chance = CHANCE;
	states = (High, Medium, Low);
	levels = (0.967421566101701, 0, -0.967421566101701);
	parents = (Physics, EnergyTransfer, NTL);
	probs = 
		// High         Medium       Low           // Physics EnergyTransfer NTL    
		  (0.9912012,   0.008790335, 8.53042e-6,   // High    High           High   
		   0.8828059,   0.1162757,   9.184728e-4,  // High    High           Medium 
		   0.5017099,   0.4715212,   0.02676892,   // High    High           Low    
		   0.8828059,   0.1162757,   9.184728e-4,  // High    Medium         High   
		   0.5017099,   0.4715212,   0.02676892,   // High    Medium         Medium 
		   0.1188891,   0.6531904,   0.2279206,    // High    Medium         Low    
		   0.5017099,   0.4715212,   0.02676892,   // High    Low            High   
		   0.1188891,   0.6531904,   0.2279206,    // High    Low            Medium 
		   0.009005226, 0.3212777,   0.6697171,    // High    Low            Low    
		   0.9202201,   0.07935004,  4.298454e-4,  // Medium  High           High   
		   0.5877298,   0.3964125,   0.01585767,   // Medium  High           Medium 
		   0.1677398,   0.6645205,   0.1677398,    // Medium  High           Low    
		   0.5877298,   0.3964125,   0.01585767,   // Medium  Medium         High   
		   0.1677398,   0.6645205,   0.1677398,    // Medium  Medium         Medium 
		   0.01585767,  0.3964125,   0.5877298,    // Medium  Medium         Low    
		   0.1677398,   0.6645205,   0.1677398,    // Medium  Low            High   
		   0.01585767,  0.3964125,   0.5877298,    // Medium  Low            Medium 
		   4.298454e-4, 0.07935004,  0.9202201,    // Medium  Low            Low    
		   0.6697171,   0.3212777,   0.009005226,  // Low     High           High   
		   0.2279206,   0.6531904,   0.1188891,    // Low     High           Medium 
		   0.02676892,  0.4715212,   0.5017099,    // Low     High           Low    
		   0.2279206,   0.6531904,   0.1188891,    // Low     Medium         High   
		   0.02676892,  0.4715212,   0.5017099,    // Low     Medium         Medium 
		   9.184728e-4, 0.1162757,   0.8828059,    // Low     Medium         Low    
		   0.02676892,  0.4715212,   0.5017099,    // Low     Low            High   
		   9.184728e-4, 0.1162757,   0.8828059,    // Low     Low            Medium 
		   8.53042e-6,  0.008790335, 0.9912012);   // Low     Low            Low    ;
	numcases = 10;
	EqnDirty = TRUE;
	title = "Properties of momentum";
	comment = "Momentum is directly related to mass\n\
		Momentum is directly related to velocity\n\
		Momentum is parallel to velocity";
	whenchanged = 1496355066;
	user U1 {
		Q = "TRUE";
		rules = "\"Compensatory\"";
		link = "\"normalLink\"";
		linkScale = "0.447213595499958";
		lnAlphas = "structure(c(-0.255412811882995, -0.0526802578289132, -0.0526802578289132 ), .Names = \
			c(\"Physics\", \"EngergyTransfer\", \"NTL\"))";
		betas = "0";
		};
	visual V1 {
		center = (582, 186);
		dispform = LABELBOX;
		height = 2;
		};
	};

node TwoStepObs {
	kind = NATURE;
	discrete = TRUE;
	states = (Full, Partial, None);
	parents = (EnergyTransfer, IterativeD);
	whenchanged = 1496356249;
	user U1 {
		Q = "structure(c(TRUE, TRUE, FALSE, TRUE), .Dim = c(2L, 2L), .Dimnames = list(     NULL, \
			c(\"EnergyTransfer\", \"IterativeD\")))";
		rules = "list(\"Compensatory\", \"OffsetConjunctive\")";
		link = "\"partialCredit\"";
		lnAlphas = "list(0, 0)";
		betas = "list(0.5, structure(c(1, 0.1), .Names = c(\"EnergyTransfer\", \"IterativeD\" )))";
		};
	visual V1 {
		center = (786, 294);
		height = 6;
		};
	};

node ConjunctiveObs {
	kind = NATURE;
	discrete = TRUE;
	states = (Right, Wrong);
	parents = (POfMom, EnergyTransfer);
	whenchanged = 1496356246;
	user U1 {
		Q = "TRUE";
		rules = "\"OffsetConjunctive\"";
		link = "\"partialCredit\"";
		lnAlphas = "0";
		betas = "structure(c(0.5, -0.5), .Names = c(\"POfMom\", \"EnergyTransfer\" ))";
		};
	visual V1 {
		center = (792, 162);
		height = 7;
		};
	};

node CompensatoryObs {
	kind = NATURE;
	discrete = TRUE;
	states = (Right, Wrong);
	parents = (POfMom, NTL);
	whenchanged = 1496356242;
	user U1 {
		Q = "TRUE";
		rules = "\"Compensatory\"";
		link = "\"partialCredit\"";
		lnAlphas = "structure(c(0.0953101798043249, -0.105360515657826), .Names = c(\"POfMom\",  \"NTL\"))";
		betas = "0.3";
		};
	visual V1 {
		center = (780, 72);
		height = 8;
		};
	};
NodeSet HighLevel {Nodes = ();};
NodeSet Proficiency {Nodes = (EnergyTransfer, POfMom, NTL, IterativeD, Physics);};
NodeSet LowLevel {Nodes = (EnergyTransfer, POfMom, NTL, IterativeD);};
NodeSet pnode {Nodes = (Physics);};
NodeSet pnodes {Nodes = (EnergyTransfer, POfMom, NTL, IterativeD, CompensatoryObs, ConjunctiveObs, TwoStepObs);};
NodeSet Proficiencies {Nodes = (EnergyTransfer, POfMom, NTL, IterativeD);};
NodeSet onodes {Nodes = (CompensatoryObs, ConjunctiveObs, TwoStepObs);};
NodeSet Observables {Nodes = (CompensatoryObs, ConjunctiveObs, TwoStepObs);};
};
