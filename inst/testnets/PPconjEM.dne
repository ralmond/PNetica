// ~->[DNET-1]->~

// File created by an unlicensed user using Netica 5.04 on 04/09/2018 at 07:32:19 PM.

bnet PPconjEM {
autoupdate = FALSE;
title = "Conjuctive Evidence Model";
comment = "An evidence model with a single conjuctive observable";
whenchanged = 1523316634;
user U1 {
	Hub = "miniPP_CM";
	Pathname = "PPconjEM.dne";
	priorWeight = "10";
	};

param X_EnergyTransfer_2 {
	kind = DISCONNECTED;
	discrete = TRUE;
	states = (High, Medium, Low);
	StateComments = ("Can use to solve difficult problems", "Can use to solve simple but not difficult problems", "Can not solve simple problems.");
	levels = (0.967421566101701, 0, -0.967421566101701);
	title = "EnergyTransfer";
	whenchanged = 1523314216;
	};

param X_POfMom_1 {
	kind = DISCONNECTED;
	discrete = TRUE;
	states = (High, Medium, Low);
	levels = (0.967421566101701, 0, -0.967421566101701);
	title = "POfMom";
	whenchanged = 1523314216;
	};

node ConjunctiveObs {
	kind = NATURE;
	discrete = TRUE;
	chance = CHANCE;
	states = (Right, Wrong);
	inputs = (EnergyTransfer, POfMom);
	parents = (X_EnergyTransfer_2, X_POfMom_1);
	probs = 
		// Right        Wrong         // EnergyTransfer POfMom 
		  (0.6888217,   0.3111782,    // High           High   
		   0.2994328,   0.7005671,    // High           Medium 
		   0.07623643,  0.9237636,    // High           Low    
		   0.6888217,   0.3111782,    // Medium         High   
		   0.2994328,   0.7005671,    // Medium         Medium 
		   0.07623643,  0.9237636,    // Medium         Low    
		   0.3111782,   0.6888217,    // Low            High   
		   0.2994328,   0.7005671,    // Low            Medium 
		   0.07623643,  0.9237636);   // Low            Low    ;
	numcases = 10;
	title = "Conjunctive Observable";
	comment = "A binary response whose probability of success is related to average of parent variables.";
	whenchanged = 1523316634;
	user U1 {
		link = "\"partialCredit\"";
		rules = "\"OffsetConjunctive\"";
		Q = "TRUE";
		lnAlphas = "0";
		betas = "structure(c(-0.5, 0.5), .Names = c(\"EnergyTransfer\", \"POfMom\" ))";
		};
	};
NodeSet onodes {Nodes = (ConjunctiveObs);};
NodeSet Observables {Nodes = (ConjunctiveObs);};
NodeSet pnodes {Nodes = (ConjunctiveObs);};
};
